// const express = require("express");
// const { GoogleGenAI } = require("@google/genai");

// const gemini = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
// if (!process.env.GEMINI_API_KEY) console.warn("тЪая╕П GEMINI_API_KEY is missing!");

// module.exports = function () {
//   const router = express.Router();

//   // POST /api/chat
//   router.post("/chat", async (req, res) => {
//     const { message } = req.body;
//     if (!message) return res.status(400).json({ error: "Message is required" });

//     let reply = "";
//     const msgLower = message.toLowerCase();

//     // Short conversational rules specific to Food Sharing
// if (msgLower.includes("hi") || msgLower.includes("hello")) {
//   reply = "Hello! ЁЯСЛ Welcome to Food Sharing! How can I help you today?";
// } else if (msgLower.includes("donate") || msgLower.includes("give food")) {
//   reply = "You can donate food by visiting the 'Add Food' page. ЁЯН▓";
// } else if (msgLower.includes("request") || msgLower.includes("need food")) {
//   reply = "To request food, go to the 'Request Food' section and fill out the form. ЁЯУЭ";
// } else if (msgLower.includes("status")) {
//   reply = "You can check the status of your requests in the 'My Requests' page.";
// } else if (msgLower.includes("available food") || msgLower.includes("foods")) {
//   reply = "Check out the 'Available Foods' page to see all currently available donations. ЁЯеЧ";
// } else if (msgLower.includes("login") || msgLower.includes("signup")) {
//   reply = "Please login or signup to access food donations and requests. ЁЯФС";
// } else if (msgLower.includes("support") || msgLower.includes("help")) {
//   reply = "Our support team is here to help! You can contact us via the 'Contact' page.";
// } else if (msgLower.includes("thank")) {
//   reply = "You're welcome! ЁЯШК Happy to help.";
// } else if (msgLower.includes("who") && msgLower.includes("we")) {
//   reply = "Food Sharing is a community platform where donors can share food and those in need can request it. ЁЯН╜я╕П";
// } else {
// //   Optional: Fallback to Gemini AI or mock reply
//   try {
//     const response = await gemini.models.generateContent({
//       model: "gemini-2.5-flash",
//       contents: `You are a Food Sharing assistant. Keep answers short and helpful. User asked: "${message}"`,
//     });
//     reply = response.text || "I'm here to help with Food Sharing!";
//   } catch (err) {
//     console.error("Gemini Error:", err);
//     reply = "I'm here to help with Food Sharing!";
//   }

// //   Fallback mock reply
//   reply = "I'm here to help with Food Sharing! Could you please clarify your question?";
// }

// res.json({ reply });
//   });

//   return router;
// };

const express = require("express");
const { GoogleGenAI } = require("@google/genai");

const gemini = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
if (!process.env.GEMINI_API_KEY) console.warn("тЪая╕П GEMINI_API_KEY is missing!");

module.exports = function () {
  const router = express.Router();

  // POST /api/chat
  router.post("/chat", async (req, res) => {
    const { message } = req.body;
    if (!message) return res.status(400).json({ error: "Message is required" });

    let reply = "";
    const msgLower = message.toLowerCase();

    // Simple language detection: check for Bengali characters
    const isBangla = /[\u0980-\u09FF]/.test(message);

    if (!isBangla) {
      // English predefined rules
      if (msgLower.includes("hi") || msgLower.includes("hello")) {
        reply = "Hello! ЁЯСЛ Welcome to Food Sharing! How can I help you today?";
      } else if (msgLower.includes("donate") || msgLower.includes("give food")) {
        reply = "You can donate food by visiting the 'Add Food' page. ЁЯН▓";
      } else if (msgLower.includes("request") || msgLower.includes("need food")) {
        reply = "To request food, go to the 'Request Food' section and fill out the form. ЁЯУЭ";
      } else if (msgLower.includes("status")) {
        reply = "You can check the status of your requests in the 'My Requests' page.";
      } else if (msgLower.includes("available food") || msgLower.includes("foods")) {
        reply = "Check out the 'Available Foods' page to see all currently available donations. ЁЯеЧ";
      } else if (msgLower.includes("login") || msgLower.includes("signup")) {
        reply = "Please login or signup to access food donations and requests. ЁЯФС";
      } else if (msgLower.includes("support") || msgLower.includes("help")) {
        reply = "Our support team is here to help! You can contact us via the 'Contact' page.";
      } else {
        // Fallback Gemini AI for English
        try {
          const response = await gemini.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `You are a Food Sharing assistant. Answer concisely in English. User asked: "${message}"`,
          });
          reply = response.text || "I'm here to help with Food Sharing!";
        } catch (err) {
          console.error("Gemini Error:", err);
          reply = "I'm here to help with Food Sharing!";
        }
      }
    } else {
      // Bengali predefined rules
      if (msgLower.includes("рж╣рж╛ржЗ") || msgLower.includes("рж╣рзНржпрж╛рж▓рзЛ")) {
        reply = "рж╣рзНржпрж╛рж▓рзЛ! ЁЯСЛ Food Sharing-ржП ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?";
      } else if (msgLower.includes("ржжрж╛ржи") || msgLower.includes("ржЦрж╛ржмрж╛рж░ ржжрж┐рждрзЗ")) {
        reply = "ржЖржкржирж┐ 'Add Food' ржкрзЗржЬрзЗ ржЧрж┐рзЯрзЗ ржЦрж╛ржмрж╛рж░ ржжрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред ЁЯН▓";
      } else if (msgLower.includes("ржЕржирзБрж░рзЛржз") || msgLower.includes("ржЦрж╛ржмрж╛рж░рзЗрж░ ржкрзНрж░рзЯрзЛржЬржи")) {
        reply = "'Request Food' рж╕рзЗржХрж╢ржирзЗ ржЧрж┐рзЯрзЗ ржлрж░рзНржо ржкрзВрж░ржг ржХрж░рзЗ ржЦрж╛ржмрж╛рж░рзЗрж░ ржЕржирзБрж░рзЛржз ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред ЁЯУЭ";
      } else if (msgLower.includes("рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕")) {
        reply = "ржЖржкржирж┐ 'My Requests' ржкрзЗржЬрзЗ ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржзрзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржиред";
      } else if (msgLower.includes("ржЙржкрж▓ржмрзНржз ржЦрж╛ржмрж╛рж░") || msgLower.includes("ржЦрж╛ржмрж╛рж░")) {
        reply = "'Available Foods' ржкрзЗржЬрзЗ ржЧрж┐рзЯрзЗ рж╕ржм ржжрж╛ржиржХрзГржд ржЦрж╛ржмрж╛рж░ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржиред ЁЯеЧ";
      } else if (msgLower.includes("рж▓ржЧржЗржи") || msgLower.includes("рж╕рж╛ржЗржиржЖржк")) {
        reply = "ржЦрж╛ржмрж╛рж░ ржжрж╛ржи ржУ ржЕржирзБрж░рзЛржз ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛рж░ ржЬржирзНржп рж▓ржЧржЗржи ржмрж╛ рж╕рж╛ржЗржиржЖржк ржХрж░рзБржиред ЁЯФС";
      } else if (msgLower.includes("рж╕рж╣рж╛ржпрж╝рждрж╛") || msgLower.includes("рж╕рж╛ржкрзЛрж░рзНржЯ")) {
        reply = "ржЖржорж╛ржжрзЗрж░ рж╕рж╣рж╛ржпрж╝рждрж╛ ржжрж▓ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзНрж░рж╕рзНрждрзБржд! 'Contact' ржкрзЗржЬрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред";
      } else {
        // Fallback Gemini AI for Bengali
        try {
          const response = await gemini.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `You are a Food Sharing assistant. Answer concisely in Bengali. User asked: "${message}"`,
          });
          reply = response.text || "ржЖржорж┐ Food Sharing ржП рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐!";
        } catch (err) {
          console.error("Gemini Error:", err);
          reply = "ржЖржорж┐ Food Sharing ржП рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐!";
        }
      }
    }

    res.json({ reply });
  });

  return router;
};
